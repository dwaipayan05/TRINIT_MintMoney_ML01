{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"COVID Chest X Ray (Xception)","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNxZ4GSqomoFpCl2CHiPIOM"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8b9DCikpmmKp","executionInfo":{"status":"ok","timestamp":1643520242856,"user_tz":-330,"elapsed":23350,"user":{"displayName":"Dwaipayan Munshi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjyagRQb_232ZpGon8Nc3HlHkc1IE04FNw5Sdz0=s64","userId":"09326201672143691491"}},"outputId":"119d122f-34fd-4629-eff2-0553f965986d"},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}]},{"cell_type":"markdown","metadata":{"id":"mNz1rfK3xpmR"},"source":["**Import Necessary Libraries**"]},{"cell_type":"code","metadata":{"id":"ySGlFOelnaHr","executionInfo":{"status":"ok","timestamp":1643520276851,"user_tz":-330,"elapsed":3211,"user":{"displayName":"Dwaipayan Munshi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjyagRQb_232ZpGon8Nc3HlHkc1IE04FNw5Sdz0=s64","userId":"09326201672143691491"}}},"source":["import os\n","import pandas as pd\n","import numpy as np\n","from tqdm import tqdm\n","import keras\n","from keras.utils.np_utils import to_categorical\n","import cv2\n","import tensorflow as tf\n","from sklearn.model_selection import train_test_split\n","from keras.layers import Flatten, Dense, Dropout\n","from keras.applications.xception import Xception\n","from keras.callbacks import ModelCheckpoint, ReduceLROnPlateau\n","from keras.models import Model, Input\n","from keras import optimizers\n","from tensorflow.keras.optimizers import Adam\n","from keras.layers import Dense, GlobalAveragePooling2D\n","from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization, AveragePooling2D, GlobalAveragePooling2D\n","import keras_preprocessing\n","from keras_preprocessing import image\n","from keras_preprocessing.image import ImageDataGenerator\n","from keras import callbacks\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import confusion_matrix\n","import seaborn as sns\n"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JjQ_O1JKyH9s","executionInfo":{"status":"ok","timestamp":1643520279032,"user_tz":-330,"elapsed":10,"user":{"displayName":"Dwaipayan Munshi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjyagRQb_232ZpGon8Nc3HlHkc1IE04FNw5Sdz0=s64","userId":"09326201672143691491"}},"outputId":"a99c5c9d-9f38-4edf-9de7-c0e630081323"},"source":["%tensorflow_version 2.x\n","print(tf.__version__)\n","print(tf.test.gpu_device_name())\n","print(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["2.7.0\n","/device:GPU:0\n","Num GPUs Available:  1\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EKkU8wRhOzdr","executionInfo":{"status":"ok","timestamp":1643520279033,"user_tz":-330,"elapsed":8,"user":{"displayName":"Dwaipayan Munshi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjyagRQb_232ZpGon8Nc3HlHkc1IE04FNw5Sdz0=s64","userId":"09326201672143691491"}},"outputId":"4d2140fa-3018-4799-84a7-ddc88730855b"},"source":["%cd /content/gdrive/\"My Drive\"/\"COVID Chest X-Ray Analysis\""],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/gdrive/.shortcut-targets-by-id/1m7N600eZogRSWhG9s77KF-kFTyZiXWjO/Detecting COVID-19 Using CNN\n"]}]},{"cell_type":"markdown","metadata":{"id":"bWbeeYIyqt8N"},"source":["\n","**Fetch Dataset**"]},{"cell_type":"code","metadata":{"id":"m5E01jOvmmcR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621151311818,"user_tz":-330,"elapsed":3315,"user":{"displayName":"Dwaipayan Munshi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjyagRQb_232ZpGon8Nc3HlHkc1IE04FNw5Sdz0=s64","userId":"09326201672143691491"}},"outputId":"18137f01-eee2-4c81-fdba-0bdbbcff4f1d"},"source":["os.environ['KAGGLE_CONFIG_DIR'] = \"/content/gdrive/MyDrive/COVID Chest X-Ray Analysis\"\n","!kaggle datasets download -d plameneduardo/sarscov2-ctscan-dataset\n","!unzip \\*.zip  && rm *.zip"],"execution_count":null,"outputs":[{"output_type":"stream","text":["sarscov2-ctscan-dataset.zip: Skipping, found more recently modified local copy (use --force to force download)\n","Archive:  sarscov2-ctscan-dataset.zip\n","  End-of-central-directory signature not found.  Either this file is not\n","  a zipfile, or it constitutes one disk of a multi-part archive.  In the\n","  latter case the central directory and zipfile comment will be found on\n","  the last disk(s) of this archive.\n","unzip:  cannot find zipfile directory in one of *.zip or\n","        *.zip.zip, and cannot find sarscov2-ctscan-dataset.zip.ZIP, period.\n","\n","No zipfiles found.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"q9O49obFxttu"},"source":["**Split Into Train Data & Test Data**"]},{"cell_type":"code","metadata":{"id":"5BPRbgW4nn3e"},"source":["disease_types=['COVID', 'non-COVID']\n","data_dir = '/content/gdrive/MyDrive/COVID Chest X-Ray Analysis/Dataset'\n","train_dir = os.path.join(data_dir)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fMQE6EEMrniq"},"source":["train_data = []\n","for defects_id, sp in enumerate(disease_types):\n","    for file in os.listdir(os.path.join(train_dir, sp)):\n","        train_data.append(['{}/{}'.format(sp, file), defects_id, sp])      \n","train = pd.DataFrame(train_data, columns=['File', 'DiseaseID','Disease Type'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bOA185RhroWb"},"source":["IMAGE_SIZE = 64\n","def read_image(filepath):\n","    return cv2.imread(os.path.join(data_dir, filepath)) \n","def resize_image(image, image_size):\n","    return cv2.resize(image.copy(), image_size, interpolation=cv2.INTER_AREA)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w0aI-ZCor8lr","executionInfo":{"status":"ok","timestamp":1643496190023,"user_tz":-330,"elapsed":320298,"user":{"displayName":"Dwaipayan Munshi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjyagRQb_232ZpGon8Nc3HlHkc1IE04FNw5Sdz0=s64","userId":"09326201672143691491"}},"outputId":"33b4f5d6-dfe7-46d6-faab-09adde236b7a"},"source":["X_train = np.zeros((train.shape[0], IMAGE_SIZE, IMAGE_SIZE, 3))\n","for i, file in tqdm(enumerate(train['File'].values)):\n","    image = read_image(file)\n","    if image is not None:\n","        X_train[i] = resize_image(image, (IMAGE_SIZE, IMAGE_SIZE))\n","X_Train = X_train / 255.\n","print(X_Train.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["2481it [05:20,  7.74it/s]\n"]},{"output_type":"stream","name":"stdout","text":["(2481, 64, 64, 3)\n"]}]},{"cell_type":"code","metadata":{"id":"yvlrhwtXr9uo"},"source":["Y_train = train['DiseaseID'].values\n","Y_train = to_categorical(Y_train, num_classes=2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aa3zZ55CsBqm"},"source":["X_train, X_val, Y_train, Y_val = train_test_split(X_Train, Y_train, test_size=0.2, random_state = 42)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TcaWuy-DxxuJ"},"source":["**Define Xception Model Architecture**"]},{"cell_type":"code","metadata":{"id":"OLERkmn6_4-M","executionInfo":{"status":"ok","timestamp":1643520304451,"user_tz":-330,"elapsed":490,"user":{"displayName":"Dwaipayan Munshi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjyagRQb_232ZpGon8Nc3HlHkc1IE04FNw5Sdz0=s64","userId":"09326201672143691491"}}},"source":["BATCH_SIZE = 64\n","EPOCHS = 100\n","SIZE=64\n","N_ch=3"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"PTzIgz1xsC6s","executionInfo":{"status":"ok","timestamp":1643520305664,"user_tz":-330,"elapsed":3,"user":{"displayName":"Dwaipayan Munshi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjyagRQb_232ZpGon8Nc3HlHkc1IE04FNw5Sdz0=s64","userId":"09326201672143691491"}}},"source":["def build_Xception():\n","    xception = Xception(weights='imagenet', include_top=False)\n","\n","    input = Input(shape=(SIZE, SIZE, N_ch))\n","    x = Conv2D(3, (3, 3), padding='same')(input)\n","    \n","    x = xception(x)\n","    \n","    x = GlobalAveragePooling2D()(x)\n","    x = BatchNormalization()(x)\n","    x = Dropout(0.5)(x)\n","    x = Dense(256, activation='relu')(x)\n","    x = BatchNormalization()(x)\n","    x = Dropout(0.5)(x)\n","\n","    # multi output\n","    output = Dense(2,activation = 'softmax', name='root')(x)\n"," \n","\n","    # model\n","    model = Model(input,output)\n","    \n","    optimizer = Adam(lr=0.003, beta_1=0.9, beta_2=0.999, epsilon=0.1, decay=0.0)\n","    model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n","    model.summary()\n","    \n","    return model"],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"l0e-97zBx1tX"},"source":["**Train the Model**"]},{"cell_type":"code","metadata":{"id":"YHjD6EQSsFC_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1643520357662,"user_tz":-330,"elapsed":2795,"user":{"displayName":"Dwaipayan Munshi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjyagRQb_232ZpGon8Nc3HlHkc1IE04FNw5Sdz0=s64","userId":"09326201672143691491"}},"outputId":"1d9ad642-1fb8-4cb8-914e-fda9c5d4e7df"},"source":["model = build_Xception()\n","annealer = ReduceLROnPlateau(monitor='val_accuracy', factor=0.70, patience=5, verbose=1, min_lr=1e-4)\n","checkpoint_path = \"/Checkpoints/cp.ckpt\"\n","checkpoint = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_path,\n","                                                 save_weights_only=True,\n","                                                 verbose=1)\n","datagen = ImageDataGenerator(rotation_range=360, \n","                        width_shift_range=0.2, \n","                        height_shift_range=0.2,\n","                        zoom_range=0.2, \n","                        horizontal_flip=True, \n","                        vertical_flip=True) \n","\n","model_json = model.to_json()\n","with open(\"Xception_Model.json\", \"w\") as json_file:\n","    json_file.write(model_json)"],"execution_count":11,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/adam.py:105: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  super(Adam, self).__init__(name, **kwargs)\n","/usr/local/lib/python3.7/dist-packages/keras/engine/functional.py:1410: CustomMaskWarning: Custom mask layers require a config and must override get_config. When loading, the custom mask layer must be passed to the custom_objects argument.\n","  layer_config = serialize_layer_fn(layer)\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"model_2\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_7 (InputLayer)        [(None, 64, 64, 3)]       0         \n","                                                                 \n"," conv2d_18 (Conv2D)          (None, 64, 64, 3)         84        \n","                                                                 \n"," xception (Functional)       (None, None, None, 2048)  20861480  \n","                                                                 \n"," global_average_pooling2d_2   (None, 2048)             0         \n"," (GlobalAveragePooling2D)                                        \n","                                                                 \n"," batch_normalization_20 (Bat  (None, 2048)             8192      \n"," chNormalization)                                                \n","                                                                 \n"," dropout_4 (Dropout)         (None, 2048)              0         \n","                                                                 \n"," dense_2 (Dense)             (None, 256)               524544    \n","                                                                 \n"," batch_normalization_21 (Bat  (None, 256)              1024      \n"," chNormalization)                                                \n","                                                                 \n"," dropout_5 (Dropout)         (None, 256)               0         \n","                                                                 \n"," root (Dense)                (None, 2)                 514       \n","                                                                 \n","=================================================================\n","Total params: 21,395,838\n","Trainable params: 21,336,702\n","Non-trainable params: 59,136\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"CAgVBnW0exZo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":372},"id":"1FWq-M5seu95","executionInfo":{"status":"error","timestamp":1643520916119,"user_tz":-330,"elapsed":21,"user":{"displayName":"Dwaipayan Munshi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjyagRQb_232ZpGon8Nc3HlHkc1IE04FNw5Sdz0=s64","userId":"09326201672143691491"}},"outputId":"dbdd3c07-fd7d-4e8a-92c5-2c486d2ec150"},"execution_count":15,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-8d24e0d40a39>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mfastapi\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mFastAPI\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpickle\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mapp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mFastAPI\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'fastapi'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]},{"cell_type":"code","source":["from keras.models import model_from_json\n","with open(\"Xception_Model.json\", 'r') as xceptionjson:\n","  xceptionmodel = model_from_json(xceptionjson.read())\n","  xceptionmodel.load_weights(\"Xception_Model.hdf5\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":207},"id":"dEOdS9o2crHu","executionInfo":{"status":"error","timestamp":1643520633485,"user_tz":-330,"elapsed":2046,"user":{"displayName":"Dwaipayan Munshi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjyagRQb_232ZpGon8Nc3HlHkc1IE04FNw5Sdz0=s64","userId":"09326201672143691491"}},"outputId":"38b32e72-5d40-4f7c-da7e-c3d170fd64c1"},"execution_count":14,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-bc9b7dae403f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m   \u001b[0mxceptionmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_weights\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Xception_Model.hdf5\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mxceptionmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_val\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'X_val' is not defined"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q3WI0Ac7Apcm","executionInfo":{"status":"ok","timestamp":1643497598986,"user_tz":-330,"elapsed":892148,"user":{"displayName":"Dwaipayan Munshi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjyagRQb_232ZpGon8Nc3HlHkc1IE04FNw5Sdz0=s64","userId":"09326201672143691491"}},"outputId":"d3309329-b6f7-483c-f609-749e59aa6984"},"source":["history = model.fit_generator(datagen.flow(X_train, Y_train, batch_size=BATCH_SIZE),\n","               steps_per_epoch=X_train.shape[0] // BATCH_SIZE,\n","               epochs=EPOCHS,\n","               verbose=1,\n","               callbacks=[annealer, checkpoint],\n","               validation_data=(X_val, Y_val))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n","  \n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","31/31 [==============================] - ETA: 0s - loss: 1.1569 - accuracy: 0.5050\n","Epoch 00001: val_loss improved from inf to 0.69196, saving model to Xception_Model.hdf5\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/engine/functional.py:1410: CustomMaskWarning: Custom mask layers require a config and must override get_config. When loading, the custom mask layer must be passed to the custom_objects argument.\n","  layer_config = serialize_layer_fn(layer)\n"]},{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r31/31 [==============================] - 31s 495ms/step - loss: 1.1569 - accuracy: 0.5050 - val_loss: 0.6920 - val_accuracy: 0.5252 - lr: 0.0030\n","Epoch 2/100\n","31/31 [==============================] - ETA: 0s - loss: 0.9709 - accuracy: 0.5388\n","Epoch 00002: val_loss improved from 0.69196 to 0.68851, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 10s 311ms/step - loss: 0.9709 - accuracy: 0.5388 - val_loss: 0.6885 - val_accuracy: 0.5372 - lr: 0.0030\n","Epoch 3/100\n","31/31 [==============================] - ETA: 0s - loss: 0.8299 - accuracy: 0.5801\n","Epoch 00003: val_loss improved from 0.68851 to 0.67654, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 10s 314ms/step - loss: 0.8299 - accuracy: 0.5801 - val_loss: 0.6765 - val_accuracy: 0.5533 - lr: 0.0030\n","Epoch 4/100\n","31/31 [==============================] - ETA: 0s - loss: 0.7759 - accuracy: 0.5756\n","Epoch 00004: val_loss improved from 0.67654 to 0.66783, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 10s 312ms/step - loss: 0.7759 - accuracy: 0.5756 - val_loss: 0.6678 - val_accuracy: 0.5755 - lr: 0.0030\n","Epoch 5/100\n","31/31 [==============================] - ETA: 0s - loss: 0.7021 - accuracy: 0.6149\n","Epoch 00005: val_loss improved from 0.66783 to 0.66727, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 10s 310ms/step - loss: 0.7021 - accuracy: 0.6149 - val_loss: 0.6673 - val_accuracy: 0.5714 - lr: 0.0030\n","Epoch 6/100\n","31/31 [==============================] - ETA: 0s - loss: 0.6878 - accuracy: 0.6003\n","Epoch 00006: val_loss improved from 0.66727 to 0.65843, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 10s 320ms/step - loss: 0.6878 - accuracy: 0.6003 - val_loss: 0.6584 - val_accuracy: 0.5976 - lr: 0.0030\n","Epoch 7/100\n","31/31 [==============================] - ETA: 0s - loss: 0.6600 - accuracy: 0.6084\n","Epoch 00007: val_loss improved from 0.65843 to 0.62947, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 10s 311ms/step - loss: 0.6600 - accuracy: 0.6084 - val_loss: 0.6295 - val_accuracy: 0.6177 - lr: 0.0030\n","Epoch 8/100\n","31/31 [==============================] - ETA: 0s - loss: 0.6512 - accuracy: 0.6200\n","Epoch 00008: val_loss improved from 0.62947 to 0.62219, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 10s 312ms/step - loss: 0.6512 - accuracy: 0.6200 - val_loss: 0.6222 - val_accuracy: 0.6278 - lr: 0.0030\n","Epoch 9/100\n","31/31 [==============================] - ETA: 0s - loss: 0.6144 - accuracy: 0.6326\n","Epoch 00009: val_loss improved from 0.62219 to 0.61648, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 10s 335ms/step - loss: 0.6144 - accuracy: 0.6326 - val_loss: 0.6165 - val_accuracy: 0.6378 - lr: 0.0030\n","Epoch 10/100\n","31/31 [==============================] - ETA: 0s - loss: 0.5914 - accuracy: 0.6648\n","Epoch 00010: val_loss improved from 0.61648 to 0.59937, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 12s 369ms/step - loss: 0.5914 - accuracy: 0.6648 - val_loss: 0.5994 - val_accuracy: 0.6680 - lr: 0.0030\n","Epoch 11/100\n","31/31 [==============================] - ETA: 0s - loss: 0.5889 - accuracy: 0.6779\n","Epoch 00011: val_loss improved from 0.59937 to 0.59798, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 13s 429ms/step - loss: 0.5889 - accuracy: 0.6779 - val_loss: 0.5980 - val_accuracy: 0.6620 - lr: 0.0030\n","Epoch 12/100\n","31/31 [==============================] - ETA: 0s - loss: 0.5840 - accuracy: 0.6875\n","Epoch 00012: val_loss improved from 0.59798 to 0.54488, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 10s 327ms/step - loss: 0.5840 - accuracy: 0.6875 - val_loss: 0.5449 - val_accuracy: 0.7062 - lr: 0.0030\n","Epoch 13/100\n","31/31 [==============================] - ETA: 0s - loss: 0.5708 - accuracy: 0.7006\n","Epoch 00013: val_loss improved from 0.54488 to 0.54005, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 10s 320ms/step - loss: 0.5708 - accuracy: 0.7006 - val_loss: 0.5401 - val_accuracy: 0.7203 - lr: 0.0030\n","Epoch 14/100\n","31/31 [==============================] - ETA: 0s - loss: 0.5518 - accuracy: 0.7177\n","Epoch 00014: val_loss improved from 0.54005 to 0.51122, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 10s 318ms/step - loss: 0.5518 - accuracy: 0.7177 - val_loss: 0.5112 - val_accuracy: 0.7445 - lr: 0.0030\n","Epoch 15/100\n","31/31 [==============================] - ETA: 0s - loss: 0.5013 - accuracy: 0.7500\n","Epoch 00015: val_loss improved from 0.51122 to 0.49167, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 10s 324ms/step - loss: 0.5013 - accuracy: 0.7500 - val_loss: 0.4917 - val_accuracy: 0.7626 - lr: 0.0030\n","Epoch 16/100\n","31/31 [==============================] - ETA: 0s - loss: 0.4820 - accuracy: 0.7812\n","Epoch 00016: val_loss improved from 0.49167 to 0.47936, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 10s 322ms/step - loss: 0.4820 - accuracy: 0.7812 - val_loss: 0.4794 - val_accuracy: 0.7706 - lr: 0.0030\n","Epoch 17/100\n","31/31 [==============================] - ETA: 0s - loss: 0.4547 - accuracy: 0.7964\n","Epoch 00017: val_loss did not improve from 0.47936\n","31/31 [==============================] - 8s 252ms/step - loss: 0.4547 - accuracy: 0.7964 - val_loss: 0.5986 - val_accuracy: 0.6861 - lr: 0.0030\n","Epoch 18/100\n","31/31 [==============================] - ETA: 0s - loss: 0.4324 - accuracy: 0.8145\n","Epoch 00018: val_loss did not improve from 0.47936\n","31/31 [==============================] - 8s 258ms/step - loss: 0.4324 - accuracy: 0.8145 - val_loss: 0.5142 - val_accuracy: 0.7384 - lr: 0.0030\n","Epoch 19/100\n","31/31 [==============================] - ETA: 0s - loss: 0.4109 - accuracy: 0.8241\n","Epoch 00019: val_loss improved from 0.47936 to 0.40346, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 11s 367ms/step - loss: 0.4109 - accuracy: 0.8241 - val_loss: 0.4035 - val_accuracy: 0.8330 - lr: 0.0030\n","Epoch 20/100\n","31/31 [==============================] - ETA: 0s - loss: 0.4139 - accuracy: 0.8196\n","Epoch 00020: val_loss did not improve from 0.40346\n","31/31 [==============================] - 8s 253ms/step - loss: 0.4139 - accuracy: 0.8196 - val_loss: 0.4454 - val_accuracy: 0.7948 - lr: 0.0030\n","Epoch 21/100\n","31/31 [==============================] - ETA: 0s - loss: 0.4155 - accuracy: 0.8216\n","Epoch 00021: val_loss did not improve from 0.40346\n","31/31 [==============================] - 8s 268ms/step - loss: 0.4155 - accuracy: 0.8216 - val_loss: 0.4415 - val_accuracy: 0.7907 - lr: 0.0030\n","Epoch 22/100\n","31/31 [==============================] - ETA: 0s - loss: 0.3900 - accuracy: 0.8332\n","Epoch 00022: val_loss improved from 0.40346 to 0.38073, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 11s 357ms/step - loss: 0.3900 - accuracy: 0.8332 - val_loss: 0.3807 - val_accuracy: 0.8310 - lr: 0.0030\n","Epoch 23/100\n","31/31 [==============================] - ETA: 0s - loss: 0.3948 - accuracy: 0.8311\n","Epoch 00023: val_loss improved from 0.38073 to 0.36397, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 10s 315ms/step - loss: 0.3948 - accuracy: 0.8311 - val_loss: 0.3640 - val_accuracy: 0.8471 - lr: 0.0030\n","Epoch 24/100\n","31/31 [==============================] - ETA: 0s - loss: 0.3613 - accuracy: 0.8518\n","Epoch 00024: val_loss improved from 0.36397 to 0.36174, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 10s 316ms/step - loss: 0.3613 - accuracy: 0.8518 - val_loss: 0.3617 - val_accuracy: 0.8370 - lr: 0.0030\n","Epoch 25/100\n","31/31 [==============================] - ETA: 0s - loss: 0.3547 - accuracy: 0.8538\n","Epoch 00025: val_loss improved from 0.36174 to 0.35877, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 10s 315ms/step - loss: 0.3547 - accuracy: 0.8538 - val_loss: 0.3588 - val_accuracy: 0.8491 - lr: 0.0030\n","Epoch 26/100\n","31/31 [==============================] - ETA: 0s - loss: 0.3480 - accuracy: 0.8609\n","Epoch 00026: val_loss improved from 0.35877 to 0.34394, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 10s 312ms/step - loss: 0.3480 - accuracy: 0.8609 - val_loss: 0.3439 - val_accuracy: 0.8571 - lr: 0.0030\n","Epoch 27/100\n","31/31 [==============================] - ETA: 0s - loss: 0.3554 - accuracy: 0.8473\n","Epoch 00027: val_loss did not improve from 0.34394\n","31/31 [==============================] - 8s 249ms/step - loss: 0.3554 - accuracy: 0.8473 - val_loss: 0.3736 - val_accuracy: 0.8471 - lr: 0.0030\n","Epoch 28/100\n","31/31 [==============================] - ETA: 0s - loss: 0.3466 - accuracy: 0.8634\n","Epoch 00028: val_loss did not improve from 0.34394\n","31/31 [==============================] - 8s 257ms/step - loss: 0.3466 - accuracy: 0.8634 - val_loss: 0.3601 - val_accuracy: 0.8370 - lr: 0.0030\n","Epoch 29/100\n","31/31 [==============================] - ETA: 0s - loss: 0.3399 - accuracy: 0.8634\n","Epoch 00029: val_loss improved from 0.34394 to 0.33580, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 11s 356ms/step - loss: 0.3399 - accuracy: 0.8634 - val_loss: 0.3358 - val_accuracy: 0.8612 - lr: 0.0030\n","Epoch 30/100\n","31/31 [==============================] - ETA: 0s - loss: 0.3369 - accuracy: 0.8634\n","Epoch 00030: val_loss improved from 0.33580 to 0.31834, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 10s 315ms/step - loss: 0.3369 - accuracy: 0.8634 - val_loss: 0.3183 - val_accuracy: 0.8873 - lr: 0.0030\n","Epoch 31/100\n","31/31 [==============================] - ETA: 0s - loss: 0.3285 - accuracy: 0.8664\n","Epoch 00031: val_loss did not improve from 0.31834\n","31/31 [==============================] - 8s 251ms/step - loss: 0.3285 - accuracy: 0.8664 - val_loss: 0.4272 - val_accuracy: 0.8048 - lr: 0.0030\n","Epoch 32/100\n","31/31 [==============================] - ETA: 0s - loss: 0.3202 - accuracy: 0.8720\n","Epoch 00032: val_loss improved from 0.31834 to 0.30025, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 12s 388ms/step - loss: 0.3202 - accuracy: 0.8720 - val_loss: 0.3003 - val_accuracy: 0.8994 - lr: 0.0030\n","Epoch 33/100\n","31/31 [==============================] - ETA: 0s - loss: 0.3124 - accuracy: 0.8745\n","Epoch 00033: val_loss did not improve from 0.30025\n","31/31 [==============================] - 8s 252ms/step - loss: 0.3124 - accuracy: 0.8745 - val_loss: 0.3332 - val_accuracy: 0.8531 - lr: 0.0030\n","Epoch 34/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2886 - accuracy: 0.8906\n","Epoch 00034: val_loss did not improve from 0.30025\n","31/31 [==============================] - 8s 256ms/step - loss: 0.2886 - accuracy: 0.8906 - val_loss: 0.3100 - val_accuracy: 0.8833 - lr: 0.0030\n","Epoch 35/100\n","31/31 [==============================] - ETA: 0s - loss: 0.3167 - accuracy: 0.8765\n","Epoch 00035: val_loss did not improve from 0.30025\n","31/31 [==============================] - 8s 254ms/step - loss: 0.3167 - accuracy: 0.8765 - val_loss: 0.5735 - val_accuracy: 0.7304 - lr: 0.0030\n","Epoch 36/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2994 - accuracy: 0.8780\n","Epoch 00036: val_loss did not improve from 0.30025\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2994 - accuracy: 0.8780 - val_loss: 0.4353 - val_accuracy: 0.7887 - lr: 0.0030\n","Epoch 37/100\n","31/31 [==============================] - ETA: 0s - loss: 0.3014 - accuracy: 0.8821\n","Epoch 00037: ReduceLROnPlateau reducing learning rate to 0.002100000018253922.\n","\n","Epoch 00037: val_loss did not improve from 0.30025\n","31/31 [==============================] - 8s 249ms/step - loss: 0.3014 - accuracy: 0.8821 - val_loss: 0.3851 - val_accuracy: 0.8270 - lr: 0.0030\n","Epoch 38/100\n","31/31 [==============================] - ETA: 0s - loss: 0.3037 - accuracy: 0.8760\n","Epoch 00038: val_loss improved from 0.30025 to 0.29437, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 11s 362ms/step - loss: 0.3037 - accuracy: 0.8760 - val_loss: 0.2944 - val_accuracy: 0.8893 - lr: 0.0021\n","Epoch 39/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2959 - accuracy: 0.8810\n","Epoch 00039: val_loss did not improve from 0.29437\n","31/31 [==============================] - 8s 252ms/step - loss: 0.2959 - accuracy: 0.8810 - val_loss: 0.3448 - val_accuracy: 0.8632 - lr: 0.0021\n","Epoch 40/100\n","31/31 [==============================] - ETA: 0s - loss: 0.3008 - accuracy: 0.8810\n","Epoch 00040: val_loss did not improve from 0.29437\n","31/31 [==============================] - 8s 259ms/step - loss: 0.3008 - accuracy: 0.8810 - val_loss: 0.4512 - val_accuracy: 0.7767 - lr: 0.0021\n","Epoch 41/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2890 - accuracy: 0.8876\n","Epoch 00041: val_loss did not improve from 0.29437\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2890 - accuracy: 0.8876 - val_loss: 0.4411 - val_accuracy: 0.7907 - lr: 0.0021\n","Epoch 42/100\n","31/31 [==============================] - ETA: 0s - loss: 0.3046 - accuracy: 0.8790\n","Epoch 00042: ReduceLROnPlateau reducing learning rate to 0.0014699999475851653.\n","\n","Epoch 00042: val_loss did not improve from 0.29437\n","31/31 [==============================] - 8s 254ms/step - loss: 0.3046 - accuracy: 0.8790 - val_loss: 0.5041 - val_accuracy: 0.7485 - lr: 0.0021\n","Epoch 43/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2895 - accuracy: 0.8871\n","Epoch 00043: val_loss did not improve from 0.29437\n","31/31 [==============================] - 8s 251ms/step - loss: 0.2895 - accuracy: 0.8871 - val_loss: 0.5370 - val_accuracy: 0.7284 - lr: 0.0015\n","Epoch 44/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2866 - accuracy: 0.8805\n","Epoch 00044: val_loss did not improve from 0.29437\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2866 - accuracy: 0.8805 - val_loss: 0.4204 - val_accuracy: 0.8028 - lr: 0.0015\n","Epoch 45/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2882 - accuracy: 0.8780\n","Epoch 00045: val_loss did not improve from 0.29437\n","31/31 [==============================] - 8s 249ms/step - loss: 0.2882 - accuracy: 0.8780 - val_loss: 0.6254 - val_accuracy: 0.7002 - lr: 0.0015\n","Epoch 46/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2975 - accuracy: 0.8720\n","Epoch 00046: val_loss did not improve from 0.29437\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2975 - accuracy: 0.8720 - val_loss: 0.4057 - val_accuracy: 0.8008 - lr: 0.0015\n","Epoch 47/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2670 - accuracy: 0.8931\n","Epoch 00047: ReduceLROnPlateau reducing learning rate to 0.0010289999307133257.\n","\n","Epoch 00047: val_loss did not improve from 0.29437\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2670 - accuracy: 0.8931 - val_loss: 0.3258 - val_accuracy: 0.8592 - lr: 0.0015\n","Epoch 48/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2787 - accuracy: 0.8881\n","Epoch 00048: val_loss did not improve from 0.29437\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2787 - accuracy: 0.8881 - val_loss: 0.3193 - val_accuracy: 0.8753 - lr: 0.0010\n","Epoch 49/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2700 - accuracy: 0.8921\n","Epoch 00049: val_loss did not improve from 0.29437\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2700 - accuracy: 0.8921 - val_loss: 0.3080 - val_accuracy: 0.8692 - lr: 0.0010\n","Epoch 50/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2715 - accuracy: 0.8957\n","Epoch 00050: val_loss did not improve from 0.29437\n","31/31 [==============================] - 8s 251ms/step - loss: 0.2715 - accuracy: 0.8957 - val_loss: 0.3181 - val_accuracy: 0.8551 - lr: 0.0010\n","Epoch 51/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2653 - accuracy: 0.8876\n","Epoch 00051: val_loss did not improve from 0.29437\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2653 - accuracy: 0.8876 - val_loss: 0.3095 - val_accuracy: 0.8712 - lr: 0.0010\n","Epoch 52/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2649 - accuracy: 0.8896\n","Epoch 00052: ReduceLROnPlateau reducing learning rate to 0.0007202999433502554.\n","\n","Epoch 00052: val_loss did not improve from 0.29437\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2649 - accuracy: 0.8896 - val_loss: 0.3168 - val_accuracy: 0.8592 - lr: 0.0010\n","Epoch 53/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2899 - accuracy: 0.8861\n","Epoch 00053: val_loss did not improve from 0.29437\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2899 - accuracy: 0.8861 - val_loss: 0.3223 - val_accuracy: 0.8632 - lr: 7.2030e-04\n","Epoch 54/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2852 - accuracy: 0.8821\n","Epoch 00054: val_loss improved from 0.29437 to 0.28957, saving model to Xception_Model.hdf5\n","31/31 [==============================] - 11s 362ms/step - loss: 0.2852 - accuracy: 0.8821 - val_loss: 0.2896 - val_accuracy: 0.8753 - lr: 7.2030e-04\n","Epoch 55/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2824 - accuracy: 0.8921\n","Epoch 00055: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 256ms/step - loss: 0.2824 - accuracy: 0.8921 - val_loss: 0.3170 - val_accuracy: 0.8551 - lr: 7.2030e-04\n","Epoch 56/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2836 - accuracy: 0.8805\n","Epoch 00056: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 261ms/step - loss: 0.2836 - accuracy: 0.8805 - val_loss: 0.3194 - val_accuracy: 0.8511 - lr: 7.2030e-04\n","Epoch 57/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2639 - accuracy: 0.8931\n","Epoch 00057: ReduceLROnPlateau reducing learning rate to 0.0005042099684942513.\n","\n","Epoch 00057: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 249ms/step - loss: 0.2639 - accuracy: 0.8931 - val_loss: 0.3166 - val_accuracy: 0.8592 - lr: 7.2030e-04\n","Epoch 58/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2656 - accuracy: 0.8987\n","Epoch 00058: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2656 - accuracy: 0.8987 - val_loss: 0.3582 - val_accuracy: 0.8290 - lr: 5.0421e-04\n","Epoch 59/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2629 - accuracy: 0.8992\n","Epoch 00059: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2629 - accuracy: 0.8992 - val_loss: 0.4033 - val_accuracy: 0.8169 - lr: 5.0421e-04\n","Epoch 60/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2670 - accuracy: 0.8871\n","Epoch 00060: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 251ms/step - loss: 0.2670 - accuracy: 0.8871 - val_loss: 0.3595 - val_accuracy: 0.8350 - lr: 5.0421e-04\n","Epoch 61/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2630 - accuracy: 0.8962\n","Epoch 00061: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 249ms/step - loss: 0.2630 - accuracy: 0.8962 - val_loss: 0.3365 - val_accuracy: 0.8410 - lr: 5.0421e-04\n","Epoch 62/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2643 - accuracy: 0.8967\n","Epoch 00062: ReduceLROnPlateau reducing learning rate to 0.0003529469657223671.\n","\n","Epoch 00062: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2643 - accuracy: 0.8967 - val_loss: 0.3564 - val_accuracy: 0.8350 - lr: 5.0421e-04\n","Epoch 63/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2687 - accuracy: 0.8982\n","Epoch 00063: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 249ms/step - loss: 0.2687 - accuracy: 0.8982 - val_loss: 0.3797 - val_accuracy: 0.8229 - lr: 3.5295e-04\n","Epoch 64/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2523 - accuracy: 0.9012\n","Epoch 00064: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 251ms/step - loss: 0.2523 - accuracy: 0.9012 - val_loss: 0.3622 - val_accuracy: 0.8310 - lr: 3.5295e-04\n","Epoch 65/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2479 - accuracy: 0.9052\n","Epoch 00065: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2479 - accuracy: 0.9052 - val_loss: 0.3585 - val_accuracy: 0.8330 - lr: 3.5295e-04\n","Epoch 66/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2446 - accuracy: 0.9012\n","Epoch 00066: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2446 - accuracy: 0.9012 - val_loss: 0.3495 - val_accuracy: 0.8370 - lr: 3.5295e-04\n","Epoch 67/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2765 - accuracy: 0.8921\n","Epoch 00067: ReduceLROnPlateau reducing learning rate to 0.0002470628678565845.\n","\n","Epoch 00067: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 254ms/step - loss: 0.2765 - accuracy: 0.8921 - val_loss: 0.3318 - val_accuracy: 0.8471 - lr: 3.5295e-04\n","Epoch 68/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2568 - accuracy: 0.8957\n","Epoch 00068: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 251ms/step - loss: 0.2568 - accuracy: 0.8957 - val_loss: 0.3491 - val_accuracy: 0.8390 - lr: 2.4706e-04\n","Epoch 69/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2585 - accuracy: 0.8997\n","Epoch 00069: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 251ms/step - loss: 0.2585 - accuracy: 0.8997 - val_loss: 0.3791 - val_accuracy: 0.8270 - lr: 2.4706e-04\n","Epoch 70/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2694 - accuracy: 0.8926\n","Epoch 00070: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 249ms/step - loss: 0.2694 - accuracy: 0.8926 - val_loss: 0.3806 - val_accuracy: 0.8270 - lr: 2.4706e-04\n","Epoch 71/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2584 - accuracy: 0.8896\n","Epoch 00071: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 251ms/step - loss: 0.2584 - accuracy: 0.8896 - val_loss: 0.3827 - val_accuracy: 0.8229 - lr: 2.4706e-04\n","Epoch 72/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2634 - accuracy: 0.8942\n","Epoch 00072: ReduceLROnPlateau reducing learning rate to 0.00017294401768594978.\n","\n","Epoch 00072: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 251ms/step - loss: 0.2634 - accuracy: 0.8942 - val_loss: 0.3705 - val_accuracy: 0.8270 - lr: 2.4706e-04\n","Epoch 73/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2481 - accuracy: 0.8921\n","Epoch 00073: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2481 - accuracy: 0.8921 - val_loss: 0.3571 - val_accuracy: 0.8330 - lr: 1.7294e-04\n","Epoch 74/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2627 - accuracy: 0.8947\n","Epoch 00074: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2627 - accuracy: 0.8947 - val_loss: 0.3735 - val_accuracy: 0.8249 - lr: 1.7294e-04\n","Epoch 75/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2655 - accuracy: 0.9002\n","Epoch 00075: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2655 - accuracy: 0.9002 - val_loss: 0.3863 - val_accuracy: 0.8129 - lr: 1.7294e-04\n","Epoch 76/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2577 - accuracy: 0.8992\n","Epoch 00076: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 254ms/step - loss: 0.2577 - accuracy: 0.8992 - val_loss: 0.3848 - val_accuracy: 0.8129 - lr: 1.7294e-04\n","Epoch 77/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2595 - accuracy: 0.9047\n","Epoch 00077: ReduceLROnPlateau reducing learning rate to 0.00012106080830562859.\n","\n","Epoch 00077: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2595 - accuracy: 0.9047 - val_loss: 0.3537 - val_accuracy: 0.8451 - lr: 1.7294e-04\n","Epoch 78/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2586 - accuracy: 0.8977\n","Epoch 00078: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2586 - accuracy: 0.8977 - val_loss: 0.3490 - val_accuracy: 0.8511 - lr: 1.2106e-04\n","Epoch 79/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2486 - accuracy: 0.9012\n","Epoch 00079: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2486 - accuracy: 0.9012 - val_loss: 0.3414 - val_accuracy: 0.8612 - lr: 1.2106e-04\n","Epoch 80/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2636 - accuracy: 0.8901\n","Epoch 00080: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 251ms/step - loss: 0.2636 - accuracy: 0.8901 - val_loss: 0.3241 - val_accuracy: 0.8612 - lr: 1.2106e-04\n","Epoch 81/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2654 - accuracy: 0.8972\n","Epoch 00081: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 251ms/step - loss: 0.2654 - accuracy: 0.8972 - val_loss: 0.3329 - val_accuracy: 0.8551 - lr: 1.2106e-04\n","Epoch 82/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2608 - accuracy: 0.8947\n","Epoch 00082: ReduceLROnPlateau reducing learning rate to 0.0001.\n","\n","Epoch 00082: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2608 - accuracy: 0.8947 - val_loss: 0.3241 - val_accuracy: 0.8612 - lr: 1.2106e-04\n","Epoch 83/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2606 - accuracy: 0.8911\n","Epoch 00083: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 251ms/step - loss: 0.2606 - accuracy: 0.8911 - val_loss: 0.3254 - val_accuracy: 0.8612 - lr: 1.0000e-04\n","Epoch 84/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2571 - accuracy: 0.8947\n","Epoch 00084: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 254ms/step - loss: 0.2571 - accuracy: 0.8947 - val_loss: 0.3305 - val_accuracy: 0.8511 - lr: 1.0000e-04\n","Epoch 85/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2574 - accuracy: 0.9022\n","Epoch 00085: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2574 - accuracy: 0.9022 - val_loss: 0.3420 - val_accuracy: 0.8491 - lr: 1.0000e-04\n","Epoch 86/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2634 - accuracy: 0.8931\n","Epoch 00086: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2634 - accuracy: 0.8931 - val_loss: 0.3361 - val_accuracy: 0.8511 - lr: 1.0000e-04\n","Epoch 87/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2425 - accuracy: 0.8987\n","Epoch 00087: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 251ms/step - loss: 0.2425 - accuracy: 0.8987 - val_loss: 0.3510 - val_accuracy: 0.8451 - lr: 1.0000e-04\n","Epoch 88/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2477 - accuracy: 0.9057\n","Epoch 00088: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 255ms/step - loss: 0.2477 - accuracy: 0.9057 - val_loss: 0.3622 - val_accuracy: 0.8350 - lr: 1.0000e-04\n","Epoch 89/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2645 - accuracy: 0.8931\n","Epoch 00089: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2645 - accuracy: 0.8931 - val_loss: 0.3463 - val_accuracy: 0.8451 - lr: 1.0000e-04\n","Epoch 90/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2698 - accuracy: 0.8841\n","Epoch 00090: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 251ms/step - loss: 0.2698 - accuracy: 0.8841 - val_loss: 0.3459 - val_accuracy: 0.8431 - lr: 1.0000e-04\n","Epoch 91/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2533 - accuracy: 0.9027\n","Epoch 00091: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2533 - accuracy: 0.9027 - val_loss: 0.3521 - val_accuracy: 0.8370 - lr: 1.0000e-04\n","Epoch 92/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2694 - accuracy: 0.8931\n","Epoch 00092: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2694 - accuracy: 0.8931 - val_loss: 0.3540 - val_accuracy: 0.8350 - lr: 1.0000e-04\n","Epoch 93/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2546 - accuracy: 0.9017\n","Epoch 00093: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2546 - accuracy: 0.9017 - val_loss: 0.3420 - val_accuracy: 0.8410 - lr: 1.0000e-04\n","Epoch 94/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2541 - accuracy: 0.8972\n","Epoch 00094: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 251ms/step - loss: 0.2541 - accuracy: 0.8972 - val_loss: 0.3431 - val_accuracy: 0.8451 - lr: 1.0000e-04\n","Epoch 95/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2574 - accuracy: 0.8942\n","Epoch 00095: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 251ms/step - loss: 0.2574 - accuracy: 0.8942 - val_loss: 0.3319 - val_accuracy: 0.8511 - lr: 1.0000e-04\n","Epoch 96/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2444 - accuracy: 0.9088\n","Epoch 00096: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 250ms/step - loss: 0.2444 - accuracy: 0.9088 - val_loss: 0.3214 - val_accuracy: 0.8551 - lr: 1.0000e-04\n","Epoch 97/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2464 - accuracy: 0.9007\n","Epoch 00097: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 251ms/step - loss: 0.2464 - accuracy: 0.9007 - val_loss: 0.3165 - val_accuracy: 0.8612 - lr: 1.0000e-04\n","Epoch 98/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2590 - accuracy: 0.8977\n","Epoch 00098: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 255ms/step - loss: 0.2590 - accuracy: 0.8977 - val_loss: 0.3049 - val_accuracy: 0.8672 - lr: 1.0000e-04\n","Epoch 99/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2444 - accuracy: 0.9017\n","Epoch 00099: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 255ms/step - loss: 0.2444 - accuracy: 0.9017 - val_loss: 0.3076 - val_accuracy: 0.8672 - lr: 1.0000e-04\n","Epoch 100/100\n","31/31 [==============================] - ETA: 0s - loss: 0.2489 - accuracy: 0.9042\n","Epoch 00100: val_loss did not improve from 0.28957\n","31/31 [==============================] - 8s 251ms/step - loss: 0.2489 - accuracy: 0.9042 - val_loss: 0.3064 - val_accuracy: 0.8672 - lr: 1.0000e-04\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"61CX6tGRCzkP"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EJHImwyDx40f"},"source":["**Plot the Results**"]},{"cell_type":"code","metadata":{"id":"8Wgt_QeG-NQx"},"source":["acc = history.history['accuracy']\n","val_acc = history.history['val_accuracy']\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":298},"id":"JDH2QVT-B4A7","executionInfo":{"status":"ok","timestamp":1621153738264,"user_tz":-330,"elapsed":2047,"user":{"displayName":"Dwaipayan Munshi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjyagRQb_232ZpGon8Nc3HlHkc1IE04FNw5Sdz0=s64","userId":"09326201672143691491"}},"outputId":"c63a808f-880a-488f-b692-c857c923de29"},"source":["epochs = range(len(acc))\n","plt.plot(epochs, acc, 'r', label='Training accuracy')\n","plt.plot(epochs, val_acc, 'b', label='Validation accuracy')\n","plt.title('TraiN & Val Acc VS Epochs')\n","plt.legend(loc=0)\n","plt.figure()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 0 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":298},"id":"2yT_i3mtB4zC","executionInfo":{"status":"ok","timestamp":1621153750762,"user_tz":-330,"elapsed":1441,"user":{"displayName":"Dwaipayan Munshi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjyagRQb_232ZpGon8Nc3HlHkc1IE04FNw5Sdz0=s64","userId":"09326201672143691491"}},"outputId":"ef5f463c-13ae-41da-e393-2f89c7a63e48"},"source":["epochs = range(len(acc))\n","plt.plot(epochs, loss, 'r', label='Training Loss')\n","plt.plot(epochs, val_loss, 'b', label='Validation Loss')\n","plt.title('TraiN & Val Loss VS Epochs')\n","plt.legend(loc=0)\n","plt.figure()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 0 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MLDbYtkfAZoT","executionInfo":{"status":"ok","timestamp":1621153785929,"user_tz":-330,"elapsed":7405,"user":{"displayName":"Dwaipayan Munshi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjyagRQb_232ZpGon8Nc3HlHkc1IE04FNw5Sdz0=s64","userId":"09326201672143691491"}},"outputId":"171c8ce5-7fd1-4305-d45c-7ad860e24db9"},"source":["model.load_weights(\"Xception_Model.hdf5\")\n","score = model.evaluate(X_val, Y_val ,verbose=1)\n","print('Test Loss:', score[0])\n","print('Test accuracy:', score[1]*100)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["16/16 [==============================] - 0s 23ms/step - loss: 0.3082 - accuracy: 0.8773\n","Test Loss: 0.3082253634929657\n","Test accuracy: 87.7263605594635\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":298},"id":"53FrHSBZIwBX","executionInfo":{"status":"ok","timestamp":1621153795843,"user_tz":-330,"elapsed":2288,"user":{"displayName":"Dwaipayan Munshi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjyagRQb_232ZpGon8Nc3HlHkc1IE04FNw5Sdz0=s64","userId":"09326201672143691491"}},"outputId":"9cc7df1f-649b-4534-fe7e-e3c7506a6c88"},"source":["Y_pred = model.predict(X_val)\n","Y_predx = np.argmax(Y_pred, axis = -1)\n","Y_valx = np.argmax(Y_val, axis = -1)\n","cf_matrix = confusion_matrix(Y_valx, Y_predx)\n","group_names = ['True Neg','False Pos','False Neg','True Pos']\n","group_counts = [\"{0:0.0f}\".format(value) for value in\n","                cf_matrix.flatten()]\n","group_percentages = [\"{0:.2%}\".format(value) for value in\n","                     cf_matrix.flatten()/np.sum(cf_matrix)]\n","labels = [f\"{v1}\\n{v2}\\n{v3}\" for v1, v2, v3 in\n","          zip(group_names,group_counts,group_percentages)]\n","labels = np.asarray(labels).reshape(2,2)\n","sns.heatmap(cf_matrix, annot = labels, fmt = '')\n","plt.title(\"Confusion Matrix\")"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Confusion Matrix')"]},"metadata":{"tags":[]},"execution_count":28},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"Fvm8fa3gJMCx"},"source":["        "],"execution_count":null,"outputs":[]}]}